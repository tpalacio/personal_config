(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'load-path "~/.emacs.d/elpa/")
(let ((default-directory "~/.emacs.d/lisp/"))
(normal-top-level-add-subdirs-to-load-path))

;; split window
(global-set-key (kbd "\C-x _") 'split-window-vertically)
(global-set-key (kbd "\C-x |") 'split-window-horizontally)

;; ack
(require 'ack)
(setq ack-command "ack")

;; ;; ack-and-a-half
;; (add-to-list 'load-path "~/.emacs.d/elpa/ack-and-a-half-1.1.3/")
;; (require 'ack-and-a-half)
;; ;; create shorter aliases
;; (defalias 'ack 'ack-and-a-half)
;; (defalias 'ack-same 'ack-and-a-half-same) ;; same file type as buffer
;; (defalias 'ack-find-file 'ack-and-a-half-find-file)
;; (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)

;; highlight indentations
;; (require 'highlight-indentation)
;; (add-hook 'python-mode-hook 'highlight-indentation-mode)
;; (add-hook 'js2-mode-hook 'highlight-indentation-mode)
;; (add-hook 'sql-mode-hook 'highlight-indentation-mode)
;; (add-hook 'scala-mode-hook 'highlight-indentation-mode)
;; set color for highlight indent
;; (set-face-background 'highlight-indentation-face "gray13")
;; (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")

;; buffer tweak
(require 'bs)
(global-set-key "\C-x\C-b" 'bs-show)

;; tsv mode
(require 'tsv-mode)
(autoload 'tsv-mode "tsv-mode" "A mode to edit table like file" t)
(autoload 'tsv-normal-mode "tsv-mode" "A minor mode to edit table like file" t)

;; cypher mode (neo4j)
(require 'cypher-mode)
(autoload 'cypher-mode "cypher-mode" "A mode to edit cypher (neo4j) scripts" t)

;; set theme
;; (require 'color-theme)

;; set default path to ~/.emacs.d/lisp/
;; (setq default-directory "~/.emacs.d/lisp/")

;; save all backups to this directory
(setq backup-directory-alist `(("." . "~/.saves_emacs")))

;; save backups by copying them instead of renaming the originals/creating new files from buffer
(setq backup-by-copying t)

;; version control for your backups
;; (setq delete-old-versions t
;;   kept-new-versions 6
;;   kept-old-versions 2
;;   version-control t)

;; paste and replace
(delete-selection-mode 1)

;; Deletes trailing whitespace when saving
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; enable line number mode
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; Get rid of menu bar
(menu-bar-mode 0)

;; show column number
(column-number-mode t)

;; set word wrap - good for splitting screen using C-x 2 and C-x 3 (C-x 1 will remove them)
(setq truncate-partial-width-windows nil)

;; last lines should end in a carriage return
(setq require-final-newline t)

;; highlight incremental search
;; (setq search-highlight t)

;; follow-mode allows easier editing of long files
;; (follow-mode t)

;; Marmalade marmalade-repo.org
;; (require 'package)
;; (add-to-list 'package-archives
;;     '("marmalade" .
;;       "http://marmalade-repo.org/packages/"))

;; old melpa
;; (add-to-list 'package-archives
;;              '("melpa" . "https://melpa.org/packages/"))
;; (when (< emacs-major-version 24)
;;   ;; For important compatibility libraries like cl-lib
;;   (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
;; (package-initialize)

;; new melpa
(require 'package)
;; (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
;;                     (not (gnutls-available-p))))
;;        (proto (if no-ssl "http" "https")))
;;   (when no-ssl
;;     (warn "\
;; Your version of Emacs does not support SSL connections,
;; which is unsafe because it allows man-in-the-middle attacks.
;; There are two things you can do about this warning:
;; 1. Install an Emacs version that does support SSL and be safe.
;; 2. Remove this warning from your init file so you won't see it again."))
;;   ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
;;   ;; (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
;;   (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
;;   (when (< emacs-major-version 24)
;;     ;; For important compatibility libraries like cl-lib
;;     (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;; Comment/Uncomment Region or Line
(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))

(global-set-key (kbd "C-c /") 'comment-or-uncomment-region-or-line)

;; Stop asking for confirmation
(setq revert-without-query
'("\.[ch]$"
  "/Makefile$"
  "\.py$"
  "\.php$"
  "\.sql"
  "\\.sql\\"
  "\\.\\"))

;; highlight current line (seems to have issues with xterm settings)
;; change hl-line color
(require 'hl-line)
;; (set-face-background 'hl-line "gray13")
;; (global-hl-line-mode)
(global-hl-line-mode 1)
(set-face-background 'highlight "#222")
(set-face-foreground 'highlight nil)
;; (set-face-underline-p 'highlight t)
(set-face-attribute hl-line-face nil :underline t)

;; highlight current line (different, but works fine) ;; originally gray13
;; (require 'highlight-current-line)
;; (highlight-current-line-on t)
;; ;; (set-face-foreground 'highlight-current-line-face "cyan")
;; (set-face-background 'highlight-current-line-face "gray13")


;; ;; highlight current column ;; this made pasting text VERY slow!
;; (require 'col-highlight)
;; (column-highlight-mode)
;; (set-face-background 'col-highlight "gray13")

;; highlight matching paren (and other delimiters)
(require 'paren)
(show-paren-mode t)

;; type "y"/"n" instead of "yes"/"no"
(fset 'yes-or-no-p 'y-or-n-p)

;; C-k kills whole line and newline if at beginning of line
(setq kill-whole-line t)

;; Turn on mouse wheel
;; (mouse-wheel-mode t)

;; get rid of hard tabs
(setq-default indent-tabs-mode nil)

;; Set tab width
;; (setq tab-width 4)
(setq default-tab-width 4)
;; (setq c-basic-offset 4)

;; set tab stops at intervals of 2 with a max of 200
(setq tab-stop-list (number-sequence 4 200 4))

;; textmate settings
;; textmate skeleton-pairs snippet
(load-file "~/.emacs.d/lisp/textmate/textmate.elc")
(require 'textmate-mode)
(mapc (lambda (mode)
        (let ((hook (intern (concat (symbol-name mode)
                                        "-mode-hook"))))
            (add-hook hook (lambda () (textmate-mode +1)))))
      '(c c++ inferior-lisp java lisp objc perl php ruby scala sql))
;;    '(c c++ emacs-lisp inferior-lisp java lisp objc perl php python ruby scala sql))
;; removed emacs-lisp from the list so that .el files would not have problems when pasting in blobs of text that contain paired delimiters
;; removed python as closing

;; set [return] to insert newline-and-indent ;; disabled the indent autoindent mode from textmate.el
(define-key global-map (kbd "RET") 'newline)
(define-key global-map (kbd "M-RET") 'newline-and-indent)

(defun insert-indented-newline-and-indent ()
    (interactive)
            (newline-and-indent)
            (tab-to-tab-stop)
)

;; (defun insert-indented-newline-and-unindent ()
;;     (interactive)
;;             (newline-and-indent)
;;             ;; (tab-to-tab-stop)
;;             (indent-for-tab-command (* -1))
;; )

(global-set-key (kbd "C-c RET") 'insert-indented-newline-and-indent)
;; (global-set-key (kbd "C-C RET") 'insert-indented-newline-and-unindent)

;; change TAB to use tab-to-tab-stop
(global-set-key (kbd "TAB") 'tab-to-tab-stop)

;; remap <option-right/left> to jump words using white space only instead of special characters
;; (global-set-key (kbd "M-[ 5 C") 'forward-whitespace)
;; this uses `forward-whitespace'
(defun backward-whitespace ()
    (interactive)
      (forward-whitespace -1)
)
(global-set-key (kbd "C-c b") 'backward-whitespace)
(global-set-key (kbd "C-c f") 'forward-whitespace)

;; multiple-cursors set up
;; (require 'load-directory)
;; (require 'multiple-cursors) ;; no longer needed to load? 2017-04-03
;; ;; When you have an active region that spans multiple lines, the following will add a cursor to each line:
(global-set-key (kbd "C-c a") 'mc/edit-lines)
;; When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c A") 'mc/mark-all-like-this)

;; set encoding
(set-terminal-coding-system 'utf-8)

;; Scala mode
;; (add-to-list 'load-path "~/.emacs.d/lisp/scala/scala-dist/tool-support/src/emacs")
;; (require 'scala-mode-auto)
;; (require 'scala-mode)

;; R and other Stats setup
;; (require 'ess-site)

;; PHP mode
;; (require 'php-mode)
;; To use abbrev-mode, add lines like this:
;; (add-hook 'php-mode-hook
;;  '(lambda () (define-abbrev php-mode-abbrev-table "ex" "extends")))

;; crontab mode
(require 'crontab-mode)

;; auto modes
(setq auto-mode-alist (append auto-mode-alist '(
("\\.ad[bs]\\'"   . ada-mode)
("\\.awk\\'"      . awk-mode)
("\\.lex\\'"      . c-mode)
("\\.cypher\\'"   . cypher-mode)
("\\.[cy]\\'"     . c++-mode)
("\\.h\\'"        . c++-mode)
("\\.hxx\\'"      . c++-mode)
("\\.[CH]\\'"     . c++-mode)
("\\.java\\'"     . java-mode)
("\\.cc\\'"       . c++-mode)
("\\.hh\\'"       . c++-mode)
("\\.cxx\\'"      . c++-mode)
("\\.cpp\\'"      . c++-mode)
("\\.rc\\'"       . c++-mode) ;; resource files
("\\.rcv\\'"      . c++-mode)
("\\.m\\'"        . matlab-mode)
("\\.p[lm]\\'"    . perl-mode)
("\\.sh\\'"       .shell-mode)
("\\.cgi\\'"      . perl-mode)
("\\.f\\'"      . fortran-mode)
("\\.F\\'"      . fortran-mode)
("\\.f90\\'"      . f90-mode)
("\\.F90\\'"      . f90-mode)
("\\.el\\'"       . emacs-lisp-mode)
("\\.emacs\\'"    . emacs-lisp-mode)
("\\.tex\\'"      . LaTeX-mode)
("\\.bib\\'"      . bibtex-mode)
("[Mm]akefile\\'" . makefile-mode)
("\\.mak\\'"      . makefile-mode)
("\\[Mm]akefile.\\'" . makefile-mode)
("\\.bat\\'"      . shell-script-mode)
("\\.tar\\'"      . tar-mode)
("\\.php\\'"     . php-mode)
("\\.html\\'"     . html-mode)
("\\.jnlp\\'"     . html-mode)
("\\.xml\\'"     . html-mode)
("\\.pddl\\'"     . lisp-mode)
("\\.scala\\'"    . scala-mode)
("\\.rb\\'"       . ruby-mode)
("\\.css\\'"      . css-mode)
("\\.py\\'"       . python-mode)
("\\.yml\\'"      . yaml-mode)
("\\.tpl\\'"      . html-mode)
("\\.lisp\\'"     . lisp-mode)
("/vsql.edit.[0-9]+\\'"  . sql-mode)
("/psql.edit.[0-9]+\\'" . sql-mode)
("/sql[A-Z,0-9]+\\'" . sql-mode)
("\\crontab\\'"    . crontab-mode)
("\\.tsv\\'"      . tsv-mode)
)))

;; (defun my-indent-region (N)
;;   (interactive "p")
;;   (if mark-active
;;       (progn (indent-rigidly (min (mark) (point)) (max (mark) (point)) (* N 4))
;;              (setq deactivate-mark nil))
;;     (self-insert-command N)))

;; (defun my-unindent-region (N)
;;   (interactive "p")
;;   (if mark-active
;;       (progn (indent-rigidly (min (mark) (point)) (max (mark) (point)) (* N -4))
;;              (setq deactivate-mark nil))
;;     (self-insert-command N)))

;; (global-set-key ">" 'my-indent-region)
;; (global-set-key "<" 'my-unindent-region)

;; Indent Region or Line
(defun shift-text (distance)
    (if (use-region-p)
        (let ((mark (mark)))
            (save-excursion
                (indent-rigidly (region-beginning)
                    (region-end)
                    distance)
                (push-mark mark t t)
                (setq deactivate-mark nil)))
        (indent-rigidly (line-beginning-position)
            (line-end-position)
            distance)))

(defun shift-right (count)
    (interactive "p")
      (shift-text (* count 4)))

(defun shift-left (count)
    (interactive "p")
      (shift-text (* count -4)))

(define-key global-map (kbd "M-]") 'shift-right)

;; (define-key global-map (kbd "M-[") 'shift-left) ;; had to remove this for local OSX instance because it was pasting additional `200~ 201~` characters from local clipboard
(define-key global-map (kbd "M-p") 'shift-left)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;; (require 'pabbrev)
;; (global-pabbrev-mode)

;; (global-set-key "\M-c"  'compile)

;; (require 'uniquify)
;; (setq uniquify-buffer-name-style 'reverse)

;; remove git from your vc-mode via .emacs:
(delete 'Git vc-handled-backends)

;; send region to tmux buffer
(add-to-list 'exec-path "/opt/homebrew/bin/")
(setenv "PATH" "/opt/homebrew/bin/:~/bin/:/usr/bin/:/usr/local/bin/:/usr/local/lib/:~/.local/bin/")

(defvar tmux-send-hist nil)
(defun tmux-send (&optional no-new-line)
  "Send selected region or currently-surrounding blank line-separated \
block of text to tmux buffer."
  (interactive "P")
    (let ((selected (if (region-active-p)
                        (buffer-substring-no-properties (region-beginning) (region-end))
                      (read-from-minibuffer "Command: " nil nil nil 'tmux-send-hist)))
          (tmpfile (make-temp-file "tmux-send.")))
      (when (region-active-p)
        (add-to-history 'tmux-send-hist selected))
      (with-temp-file tmpfile
        (insert selected))
      (call-process "tmux" nil nil nil
                    "load-buffer" tmpfile ";"
      )
      (delete-file tmpfile)
      (deactivate-mark)))

(define-key global-map (kbd "C-c w") 'tmux-send)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; org-mode stuff
;; (require 'org-install)
;; (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
;; (define-key global-map "\C-cl" 'org-store-link)
;; (define-key global-map "\C-ca" 'org-agenda)
;; (setq org-log-done t)

;; transpose windows
(require 'transpose-frame)
(define-key global-map (kbd "C-c <left>") 'flop-frame)
(define-key global-map (kbd "C-c <right>") 'flop-frame)
(define-key global-map (kbd "C-c <up>") 'flip-frame)
(define-key global-map (kbd "C-c <down>") 'flip-frame)
(define-key global-map (kbd "C-c [") 'rotate-frame-anticlockwise)
(define-key global-map (kbd "C-c ]") 'rotate-frame-clockwise)

;; M-k kills the line to the left
(global-set-key "\M-k" '(lambda () (interactive) (kill-line 0)) )

;; taken from http://www.emacswiki.org/emacs/motion-and-kill-dwim.el
(defun backward-kill-to-char-dwim (n char)
    "Kill backwards up to CHAR. With argument, do this that many times"
    (interactive "p\ncBackward kill to char: ")
    (unless (and n (> n 0)) (setq n 1))
    (let ((case-fold-search nil))
        (kill-region (point) (progn
            (search-backward (char-to-string char) nil nil n)
            (forward-char)
            (point)))))

;; better version of deleting words forward or backward
;; modified this from http://stackoverflow.com/questions/13896402/kill-word-forward-word-should-stop-at-newline
(defun backward-word-stop-bol (arg)
    (interactive "p")
      (let ((start (point)))
            (save-restriction
                    (save-excursion
                          (move-beginning-of-line 1)
                              (narrow-to-region start (point)))
                          (backward-word arg))))

(defun kill-to-start-of-word-or-line (arg)
    (interactive "p")
      (progn (backward-delete-char-untabify arg) (kill-region (point) (progn (backward-word-stop-bol arg) (point)))))

(defun forward-word-stop-eol (arg)
    (interactive "p")
      (let ((start (point)))
            (save-restriction
                    (save-excursion
                              (move-end-of-line 1)
                                      (narrow-to-region start (point)))
                          (forward-word arg))))

(defun kill-to-end-of-word-or-line (arg)
    (interactive "p")
      (progn (delete-char arg) (kill-region (point) (progn (forward-word-stop-eol arg) (point)))))

(global-unset-key "\M-\d")
(global-set-key "\M-\d" 'kill-to-start-of-word-or-line)
(global-unset-key "\M-d")
(global-set-key "\M-d" 'kill-to-end-of-word-or-line)

;; Disable the splash screen (to enable it agin, replace the t with 0)
(setq inhibit-splash-screen t)

;; Enable transient mark mode
(transient-mark-mode 1)

;; Jump to next punctuation
(defun jump-forward-comma ()
  "Move cursor to the next occurrence of 「,」
URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
Version 2015-03-24"
  (interactive)
  (forward-char)
  (search-forward-regexp "\\,+" nil t (backward-char)))

(defun jump-backward-comma ()
  "Move cursor to the previous occurrence of 「,」
URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
Version 2015-03-24"
  (interactive)
  (backward-char)
  (search-backward-regexp "\\,+" nil t)
  (forward-char)
)

(global-unset-key "\C-c,")
(global-set-key "\C-c," 'jump-forward-comma)
(global-unset-key "\C-x,")
(global-set-key "\C-x," 'jump-backward-comma)

(defun jump-forward-dot ()
  "Move cursor to the next occurrence of 「.」
URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
Version 2015-03-24"
  (interactive)
  (forward-char)
  (search-forward-regexp "\\.+" nil t (backward-char)))

(defun jump-backward-dot ()
  "Move cursor to the previous occurrence of 「.」
URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
Version 2015-03-24"
  (interactive)
  (backward-char)
  (search-backward-regexp "\\.+" nil t)
  (forward-char)
)

(global-unset-key "\C-c.")
(global-set-key "\C-c." 'jump-forward-dot)
(global-unset-key "\C-x.")
(global-set-key "\C-x." 'jump-backward-dot)

(defun jump-forward-semicolon ()
  "Move cursor to the next occurrence of 「;」
URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
Version 2015-03-24"
  (interactive)
  (forward-char)
  (search-forward-regexp "\\;+" nil t (backward-char))
)

(defun jump-backward-semicolon ()
  "Move cursor to the previous occurrence of 「;」
URL `http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html'
Version 2015-03-24"
  (interactive)
  (backward-char)
  (search-backward-regexp "\\;+" nil t)
  (forward-char)
)

(global-unset-key "\C-c;")
(global-set-key "\C-c;" 'jump-forward-semicolon)
(global-unset-key "\C-x;")
(global-set-key "\C-x;" 'jump-backward-semicolon)

;; turn off auto indent mode
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
   ;; '(ack syntax-subword json-navigator csv csv-mode yaml-mode projectile auto-complete dumb-jump slime multiple-cursors)))
 '(package-selected-packages
   '(ack syntax-subword json-navigator csv csv-mode yaml-mode projectile auto-complete dumb-jump multiple-cursors)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; add dumb-jump key bindings
;; (dumb-jump-mode) -- default mappings werent working
;; these are now considered obsolete but still should work
;; (global-set-key (kbd "C-c g") 'dumb-jump-go)
;; (global-set-key (kbd "C-c p") 'dumb-jump-back)
;; newer
;; (global-set-key (kbd "C-c g") 'xref-find-definitions)
(global-set-key (kbd "C-c p") 'xref-pop-marker-stack)

;; hide/show a block of code (based on pair of balanced-expression code blocks or multi-line comment blocks)
    (defun toggle-hiding (column)
      (interactive "P")
      (hs-minor-mode)
      (hs-toggle-hiding)
    )
;; set up key binding
    (global-set-key (kbd "C-c h") 'toggle-hiding)

;; auto-complete
(require 'auto-complete)
(auto-complete-mode)
(ac-config-default)

;; keep cursor at same position when scrolling
(setq scroll-preserve-screen-position 1)
;; scroll window up/down by one line
(global-set-key (kbd "ESC <down>") (kbd "C-u 1 C-v"))
(global-set-key (kbd "ESC <up>") (kbd "C-u 1 M-v"))

;; turns out im not a fan of this as default
;; (global-set-key (kbd "<down>") (kbd "C-u 1 C-v"))
;; (global-set-key (kbd "<up>") (kbd "C-u 1 M-v"))
;;
;; ;; add back the up and down functionality with ESC-
;; (global-set-key (kbd "ESC <down>") (kbd "C-n"))
;; (global-set-key (kbd "ESC <up>") (kbd "C-p"))

;; lowercase file except quoted strings
(defun my/lowercase-non-strings ()
  "Lowercase all except strings.

Ignores both single- and double-quoted strings. If the buffer's
current major mode defines other things to be strings, they will
be ignored, too."
  (interactive)
  (let* ((old-syntax-table (syntax-table))
         (new-syntax-table (make-syntax-table old-syntax-table)))
    (modify-syntax-entry ?\" "\"   " new-syntax-table)
    (modify-syntax-entry ?\' "\"   " new-syntax-table)
    (with-syntax-table new-syntax-table
      (save-excursion
        (goto-char (point-min))
        (while (< (point) (point-max))
          (while (and (< (point) (point-max))
                      (nth 3 (syntax-ppss (point)))) ;in string
            (goto-char (1+ (point))))
          (let ((start (point)))
            (while (and (< (point) (point-max))
                        (not (nth 3 (syntax-ppss (point))))) ;not in string
              (goto-char (1+ (point))))
            (downcase-region start (point))))))))

;; projectile file search
(projectile-mode +1)
(setq projectile-sort-order 'modification-time)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(global-set-key (kbd "C-c C-f") 'projectile-find-file-dwim-other-window)
(add-to-list 'projectile-globally-ignored-directories "*models/exposures")

;; yaml
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

;; toggle window splits
;; https://www.emacswiki.org/emacs/ToggleWindowSplit
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(define-key global-map (kbd "C-x t") 'toggle-window-split)

;; set auto-save to a specific directory
;; (setq auto-save-file-name-transforms
;;   `((".*" "~/.emacs-saves/" t)))

;; (setq backup-directory-alist '(("." . "~/.emacs-saves")))

;; folding function to help wrangle structured files (e.g. large YAML files)
;; source: https://stackoverflow.com/questions/1587972/how-to-display-indentation-guides-in-emacs/4459159#4459159a
(defun aj-toggle-fold ()
  "Toggle fold all lines larger than indentation on current line"
  (interactive)
  (let ((col 1))
    (save-excursion
      (back-to-indentation)
      (setq col (+ 1 (current-column)))
      (set-selective-display
       (if selective-display nil (or col 1))))))
(global-set-key [(M C i)] 'aj-toggle-fold)


;; hierarchy and tree mode (makes json-navigator prettier)
(require 'hierarchy)
(require 'tree-mode)

;; syntax-subword
(global-syntax-subword-mode)
(setq syntax-subword-skip-spaces t)

;; dbt: replace ref() with schema
(defun replace-dbt-ref-with-schema ()
  "Replace {{ ref('<some_string>') }} with $1.<some_string> in the buffer."
  (interactive)
  (let ((default-input "dbt_prod"))
  (let ((input (read-string "Enter target schema: " default-input)))
    (goto-char (point-min))
    (while (re-search-forward "{{\\s-*ref([\"']\\([^\"']+\\)[\"'])\\s-*}}" nil t)
      (replace-match (concat input "." (match-string 1)))))))

(global-set-key (kbd "C-c r") 'replace-dbt-ref-with-schema)

;; dbt: replace hardcoded schema with ref()
(defun replace-schema-with-dbt-ref ()
  "Replace all instances of DBT_SCHEMA.table with {{ ref('table') }} in the current buffer."
  (interactive)
  (let ((default-input "dbt_prod"))
  (let ((input (read-string "Enter target schema: " default-input)))
    (goto-char (point-min))
    (while (re-search-forward (concat input "\\.\\([a-zA-Z_][a-zA-Z0-9_]*\\)\\( \\|$\\)") nil t)
      (replace-match "{{ ref('\\1') }}\\2")))))

(global-set-key (kbd "C-c R") 'replace-schema-with-dbt-ref)


(defun sql-group-order-by-prompt ()
  "Prompt the user for a number and insert SQL GROUP BY and ORDER BY clauses into the current buffer."
  (interactive)
  (let* ((n (read-number "Enter a number: "))
         (numbers (mapconcat 'number-to-string (number-sequence 1 n) ",")))
    (insert (concat "group by " numbers "\norder by " numbers "\n"))))

(global-set-key (kbd "C-c g") 'sql-group-order-by-prompt)


;; ;; split comma delimited region onto new lines
;; (defun split-region-on-commas (start end)
;;   "Split the region delimited by START and END on commas, putting each item on a new line."
;;   (interactive "r")
;;   (save-excursion
;;     (goto-char start)
;;     ;; Insert a newline at the beginning of the region
;;     (insert "\n")
;;     ;; Adjust end position to account for inserted newline
;;     (setq end (+ end 1))
;;     (while (search-forward "," end t)
;;       (replace-match ",\n"))
;;     (goto-char start)
;;     (while (re-search-forward "\\s-+" end t)
;;       (replace-match ""))
;;     ;; Ensure the region remains selected
;;     (set-mark start)
;;     (goto-char end)
;;     (setq deactivate-mark nil)))

(defun split-region-on-commas (start end)
  "Split the region delimited by START and END on commas, putting each item on a new line."
  (interactive "r")
  (let ((default-delimiter ","))
  (let ((delimiter (read-string "Enter delimiter: " default-delimiter)))
  (save-excursion
    (goto-char start)
    ;; Insert a newline at the beginning of the region
    (insert "\n")
    ;; Adjust end position to account for inserted newline
    (setq start (+ start 1))
    (setq end (+ end 1))
    (while (search-forward delimiter end t)
      (replace-match (concat delimiter "\n")))
    (goto-char start)
    (while (re-search-forward "\\s-+" end t)
      (replace-match ""))
    ;; Ensure the region remains selected
    (set-mark start)
    (goto-char end)
    (setq deactivate-mark nil)))))

(global-set-key (kbd "C-c s") 'split-region-on-commas)
